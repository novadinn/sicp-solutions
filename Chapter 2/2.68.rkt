#lang sicp

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define encode-symbol
  (lambda (sym tree)
    (cond
      ((null? tree) (error "ENCODING ERROR"))
      ((leaf? tree) '())
      ((memq sym (symbols (left-branch tree)))
       (cons 0 (encode-symbol sym (left-branch tree))))
      ((memq sym (symbols (right-branch tree)))
       (cons 1 (encode-symbol sym (right-branch tree))))
      (else (error "ENCODING ERROR")))))